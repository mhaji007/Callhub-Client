[{"D:\\callhub\\client\\src\\App.js":"1","D:\\callhub\\client\\src\\index.js":"2","D:\\callhub\\client\\src\\components\\Login.js":"3","D:\\callhub\\client\\src\\utils\\Axios.js":"4","D:\\callhub\\client\\src\\utils\\Socketio.js":"5","D:\\callhub\\client\\src\\hooks\\useLocalStorage.js":"6","D:\\callhub\\client\\src\\components\\CallCenter.js":"7","D:\\callhub\\client\\src\\components\\NavBar.js":"8","D:\\callhub\\client\\src\\components\\CallProgress.js":"9","D:\\callhub\\client\\src\\hooks\\useTokenFromLocalStorage.js":"10"},{"size":5193,"mtime":1607809874972,"results":"11","hashOfConfig":"12"},{"size":208,"mtime":1606845735934,"results":"13","hashOfConfig":"12"},{"size":2341,"mtime":1606845739963,"results":"14","hashOfConfig":"12"},{"size":159,"mtime":1606845731669,"results":"15","hashOfConfig":"12"},{"size":975,"mtime":1607275350937,"results":"16","hashOfConfig":"12"},{"size":1075,"mtime":1606855705246,"results":"17","hashOfConfig":"12"},{"size":358,"mtime":1606924669691,"results":"18","hashOfConfig":"12"},{"size":595,"mtime":1606857753492,"results":"19","hashOfConfig":"12"},{"size":1002,"mtime":1607118678673,"results":"20","hashOfConfig":"12"},{"size":635,"mtime":1607233113289,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"136mypg",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},"D:\\callhub\\client\\src\\App.js",["48","49","50","51"],"import React, { useEffect, useState } from \"react\";\r\nimport Login from \"./components/Login\";\r\nimport CallCenter from \"./components/CallCenter\";\r\nimport { useImmer } from \"use-immer\";\r\nimport axios from \"./utils/Axios\";\r\nimport socket from \"./utils/Socketio\";\r\nimport useTokenFromLocalStorage from \"./hooks/useTokenFromLocalStorage\";\r\nimport * as Twilio from \"twilio-client\";\r\n\r\nfunction App() {\r\n  // State for storing calls (req.body) object\r\n  // sent back from calls-new endpoint\r\n  const [calls, setCalls] = useImmer({\r\n    calls: [],\r\n  });\r\n  // State for storing token received from server\r\n  // after code verification\r\n  // const [token, setToken] = useState();\r\n\r\n  // State for storing username and mobile number\r\n  // of the user entered in the login form as well\r\n  // as verification status of the code\r\n  const [user, setUser] = useImmer({\r\n    username: \"\",\r\n    mobileNumber: \"\",\r\n    verificationCode: \"\",\r\n    verificationSent: false,\r\n  });\r\n\r\n    const [twilioToken, setTwilioToken] = useState();\r\n\r\n  // const [storedToken, setStoredToken] = useLocalStorage(\"token\", null);\r\n  const [storedToken, setStoredToken, isValidToken] = useTokenFromLocalStorage(\r\n    null\r\n  );\r\n\r\n  // Before our application was broadcasting the event to anyone that wants to hear\r\n  // what we need to do now is to use this token so only people with a valid token\r\n  // can listen to some (or all) of the events, for any page, or to be more exact any\r\n  // application that tries to connect to the socket\r\n\r\n\r\n    useEffect(() => {\r\n      console.log(\"Twilio token changed\");\r\n      if (twilioToken) {\r\n        connectTwilioVoiceClient(twilioToken);\r\n      }\r\n    }, [twilioToken]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (isValidToken) {\r\n      console.log(\"Valid token\");\r\n      socket.addToken(storedToken);\r\n    }\r\n    console.log(\"Invalid token\");\r\n    socket.removeToken();\r\n  }, [isValidToken, storedToken]);\r\n\r\n  // Upon component mounting listen\r\n  // on socket for disconnect event\r\n  useEffect(() => {\r\n    socket.client.on(\"connect\", () => {\r\n      console.log(\"Connected\");\r\n    });\r\n\r\n    socket.client.on(\"disconnect\", () => {\r\n      console.log(\"Socket disconnected\");\r\n    });\r\n    // Event coming from backend\r\n    socket.client.on(\"twilio-token\", (data) => {\r\n      console.log(\"Receive Token from the backend\");\r\n      setTwilioToken(data.token);\r\n    });\r\n    // Receives the data that is sent back\r\n    // from new-call endpoint that handles Twilio's\r\n    // webhook call and stores it in local state\r\n    // Destructure CallSid and CallStatus from data\r\n    socket.client.on(\"call-new\", ({ data: { CallSid, CallStatus } }) => {\r\n      setCalls((draft) => {\r\n        draft.calls.push({ CallSid, CallStatus });\r\n      });\r\n    });\r\n\r\n    socket.client.on(\"enqueue\", ({ data: { CallSid } }) => {\r\n      setCalls((draft) => {\r\n        const index = draft.calls.findIndex(\r\n          ({ CallSid }) => CallSid === CallSid\r\n        );\r\n        if (index === -1) {\r\n          return;\r\n        }\r\n        draft.calls[index].CallStatus = \"enqueue\";\r\n      });\r\n    });\r\n    return () => {};\r\n  }, [socket.client]);\r\n\r\n  // Function to send user's credentials along\r\n  // with channel type to server to request for\r\n  // a verification code\r\n  async function sendSmsCode() {\r\n    console.log(\"Sending SMS\");\r\n    await axios.post(\"/login\", {\r\n      to: user.mobileNumber,\r\n      username: user.username,\r\n      channel: \"sms\",\r\n    });\r\n\r\n    // Set verificationSent to true\r\n    // draft => {} always takes a funciton\r\n    setUser((draft) => {\r\n      draft.verificationSent = true;\r\n    });\r\n  }\r\n\r\n  function connectTwilioVoiceClient(twilioToken) {\r\n    const device = new Twilio.Device(twilioToken, { debug: true });\r\n    device.on(\"error\", (error) => {\r\n      console.error(error);\r\n    });\r\n    device.on(\"incoming\", (connection) => {\r\n      console.log(\"Incoming from twilio\");\r\n      connection.accept();\r\n    });\r\n  }\r\n\r\n  // Function to send back the code\r\n  // to server to request verification\r\n  // and receive a jwt token.\r\n  // Once the request is made, if code is valid\r\n  // server creates and sends back a jwt token\r\n  async function sendVerificationCode() {\r\n    console.log(\"Sending Verification\");\r\n    const response = await axios.post(\"/verify\", {\r\n      to: user.mobileNumber,\r\n      code: user.verificationCode,\r\n      username: user.username,\r\n    });\r\n\r\n    console.log(\"Received token\", response.data.token);\r\n    setStoredToken(response.data.token);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* State and function requesting the verification\r\n      code is passed onto the login form */}\r\n      {isValidToken ? (\r\n        <CallCenter calls={calls} />\r\n      ) : (\r\n        <Login\r\n          user={user}\r\n          setUser={setUser}\r\n          sendSmsCode={sendSmsCode}\r\n          sendVerificationCode={sendVerificationCode}\r\n        />\r\n      )}\r\n      {/* Map through the calls\r\n      first calls is our local state\r\n      which is in fact the body object sent back\r\n      from server's new-calls endpoint upon receiving a call\r\n      second call is a property on that object\r\n      that is sent back from server */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\callhub\\client\\src\\index.js",[],["52","53"],"D:\\callhub\\client\\src\\components\\Login.js",[],"D:\\callhub\\client\\src\\utils\\Axios.js",[],["54","55"],"D:\\callhub\\client\\src\\utils\\Socketio.js",[],"D:\\callhub\\client\\src\\hooks\\useLocalStorage.js",[],"D:\\callhub\\client\\src\\components\\CallCenter.js",[],["56","57"],"D:\\callhub\\client\\src\\components\\NavBar.js",[],"D:\\callhub\\client\\src\\components\\CallProgress.js",[],"D:\\callhub\\client\\src\\hooks\\useTokenFromLocalStorage.js",["58"],"import { useEffect, useState } from \"react\";\r\nimport useLocalStorage from \"./useLocalStorage\";\r\nimport Axios from \"../utils/Axios\";\r\n\r\nfunction useTokenFromLocalStorage(initialValue) {\r\n  const [value, setValue] = useLocalStorage(\"token\", initialValue);\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  useEffect(() => {\r\n    checkToken();\r\n  }, [value]);\r\n\r\n  async function checkToken() {\r\n    const { data } = await Axios.post(\"./check-token\", { token: value });\r\n    console.log(\"Check token\", data);\r\n    setIsValid(data.isValid);\r\n  }\r\n\r\n  return [value, setValue, isValid];\r\n}\r\n\r\nexport default useTokenFromLocalStorage;\r\n",["59","60"],{"ruleId":"61","severity":1,"message":"62","line":30,"column":12,"nodeType":"63","messageId":"64","endLine":30,"endColumn":23},{"ruleId":"65","severity":1,"message":"66","line":83,"column":28,"nodeType":"67","messageId":"68","endLine":83,"endColumn":47},{"ruleId":"69","severity":1,"message":"70","line":92,"column":6,"nodeType":"71","endLine":92,"endColumn":21,"suggestions":"72"},{"ruleId":"61","severity":1,"message":"73","line":112,"column":12,"nodeType":"63","messageId":"64","endLine":112,"endColumn":36},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"74","replacedBy":"78"},{"ruleId":"76","replacedBy":"79"},{"ruleId":"74","replacedBy":"80"},{"ruleId":"76","replacedBy":"81"},{"ruleId":"69","severity":1,"message":"82","line":11,"column":6,"nodeType":"71","endLine":11,"endColumn":13,"suggestions":"83"},{"ruleId":"74","replacedBy":"84"},{"ruleId":"76","replacedBy":"85"},"no-unused-vars","'twilioToken' is assigned a value but never used.","Identifier","unusedVar","no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setCalls'. Either include it or remove the dependency array. Outer scope values like 'socket.client' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["86"],"'connectTwilioVoiceClient' is defined but never used.","no-native-reassign",["87"],"no-negated-in-lhs",["88"],["87"],["88"],["87"],["88"],"React Hook useEffect has a missing dependency: 'checkToken'. Either include it or remove the dependency array.",["89"],["87"],["88"],{"desc":"90","fix":"91"},"no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},"Update the dependencies array to be: [setCalls]",{"range":"94","text":"95"},"Update the dependencies array to be: [checkToken, value]",{"range":"96","text":"97"},[2934,2949],"[setCalls]",[352,359],"[checkToken, value]"]